{"version":3,"sources":["components/Todo.js","components/TodoForm.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","index","completeTodo","removeTodo","console","log","className","style","isCompleted","text","type","onClick","evt","TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","placeholder","onChange","target","TodoList","todos","map","key","App","setTodos","useCallback","newTodos","filter","t","idx","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6PA2BeA,G,MAzBF,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,WACxCC,QAAQC,IAAIL,GAOZ,OACE,yBACEM,UAAU,kBACVC,MAAO,CAAC,eAAkBP,EAAKQ,YAAc,eAAgB,KAC7D,yBAAKF,UAAU,eACZN,EAAKS,MAER,yBAAKH,UAAU,wBACb,4BAAQA,UAAU,uBAAuBI,KAAK,SAASC,QAdjC,SAACC,GAC3BV,EAAaD,KAaT,YAGA,4BAAQK,UAAU,iBAAiBK,QAdf,SAACC,GACzBT,EAAWF,KAaP,SCnBO,SAASY,EAAT,GAAgC,IAAZC,EAAW,EAAXA,QAAW,EAClBC,mBAAS,IADS,mBACrCC,EADqC,KAC9BC,EAD8B,KAU5C,OACE,0BAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACGJ,IACLF,EAAQE,GACRC,EAAS,OAKT,yBAAKX,UAAU,cACb,2BACEI,KAAK,OACLJ,UAAU,eACVU,MAAOA,EACPK,YAAY,8BACZC,SAAU,SAAAH,GAAC,OAAIF,EAASE,EAAEI,OAAOP,YChB1B,SAASQ,EAAT,GAAmE,IAAD,IAA/CC,aAA+C,MAAvC,GAAuC,EAAnCX,EAAmC,EAAnCA,QAASZ,EAA0B,EAA1BA,aAAcC,EAAY,EAAZA,WAEnE,OACE,yBAAKG,UAAU,aACZmB,EAAMC,KAAI,SAAC1B,EAAMC,GAAP,OACT,kBAAC,EAAD,CACE0B,IAAK3B,EAAKS,KACVR,MAAOA,EACPD,KAAMA,EACNE,aAAcA,EACdC,WAAYA,OAGhB,kBAACU,EAAD,CAAUC,QAASA,KCaVc,MA3Bf,WAAgB,IAAD,EACab,mBAAS,CACjC,CAAEN,KAAM,oBAAsBD,aAAa,GAC3C,CAAEC,KAAM,wBAA0BD,aAAa,GAC/C,CAAEC,KAAM,6BAA+BD,aAAa,KAJzC,mBACNiB,EADM,KACCI,EADD,KAUP3B,EAAe4B,uBAAY,SAAA7B,GAC/B,IAAM8B,EAAQ,YAAON,GACrBM,EAAS9B,GAAT,aAAiC,EACjC4B,EAASE,KACR,CAACN,IACEtB,EAAa2B,uBAAY,SAAA7B,GAC7B,IAAM8B,EAAWN,EAAMO,QAAO,SAACC,EAAGC,GAAJ,OAAYA,IAAQjC,KAClD4B,EAASE,KACR,CAACN,IACJ,OACE,yBAAKnB,UAAU,OACb,wBAAIA,UAAU,kBAAd,gBACA,kBAACkB,EAAD,CAAUC,MAAOA,EAAOX,QAhBZ,SAAAL,GACZ,IAAMsB,EAAQ,sBAAON,GAAP,CAAc,CAAChB,UAC7BoB,EAASE,IAciC7B,aAAcA,EAAcC,WAAYA,MCbpEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.2d3e30b2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Todo = ({todo, index, completeTodo, removeTodo}) => {\n  console.log(todo)\n  const handleCompleteClick = (evt) => {\n    completeTodo(index);\n  };\n  const handleRemoveClick = (evt) => {\n    removeTodo(index);\n  }\n  return (\n    <div\n      className=\"card w-auto p-3\"\n      style={{'textDecoration': todo.isCompleted ? 'line-through': ''}}>\n      <div className=\"card-header\">\n        {todo.text}\n      </div>\n      <div className=\"card-body text-right\">\n        <button className=\"btn btn-primary mr-1\" type=\"button\" onClick={handleCompleteClick}>\n          Complete\n        </button>\n        <button className=\"btn btn-danger\" onClick={handleRemoveClick}>x</button>\n      </div>\n\n  </div>);\n};\n\nexport default Todo;\n","import React, {useState} from 'react';\n\nexport default function TodoForm({ addTodo }) {\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n    <div className=\"form-group\">\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        value={value}\n        placeholder=\"Add a sample todo item here\"\n        onChange={e => setValue(e.target.value)}\n      />\n    </div>\n    </form>\n  );\n}\n","import React from 'react';\nimport Todo from './Todo';\nimport TodoForm from './TodoForm';\n\nexport default function TodoList({todos = [], addTodo, completeTodo, removeTodo}){\n\n  return (\n    <div className=\"todo-list\">\n      {todos.map((todo, index) => (\n        <Todo\n          key={todo.text}\n          index={index}\n          todo={todo}\n          completeTodo={completeTodo}\n          removeTodo={removeTodo}\n        />\n      ))}\n      <TodoForm addTodo={addTodo}/>\n    </div>\n  )\n}\n","import React, {useState, useCallback} from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\nfunction App() {\n  const [todos, setTodos] = useState([\n    { text: \"Learn about React\" , isCompleted: false},\n    { text: \"Meet friend for lunch\" , isCompleted: false},\n    { text: \"Build really cool todo app\" , isCompleted: false}\n  ]);\n  const addTodo = text => {\n      const newTodos = [...todos, {text}];\n      setTodos(newTodos);\n  };\n  const completeTodo = useCallback(index => {\n    const newTodos = [...todos];\n    newTodos[index]['isCompleted'] = true;\n    setTodos(newTodos);\n  }, [todos])\n  const removeTodo = useCallback(index => {\n    const newTodos = todos.filter((t, idx) => idx !== index);\n    setTodos(newTodos);\n  }, [todos]);\n  return (\n    <div className=\"app\">\n      <h2 className=\"text-monospace\"> Todo List  </h2>\n      <TodoList todos={todos} addTodo={addTodo} completeTodo={completeTodo} removeTodo={removeTodo}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}